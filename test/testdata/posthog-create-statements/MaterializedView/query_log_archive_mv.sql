CREATE MATERIALIZED VIEW default.query_log_archive_mv TO default.query_log_archive (`hostname` LowCardinality(String), `user` LowCardinality(String), `query_id` String, `type` Enum8('QueryStart' = 1, 'QueryFinish' = 2, 'ExceptionBeforeStart' = 3, 'ExceptionWhileProcessing' = 4), `event_date` Date, `event_time` DateTime, `event_time_microseconds` DateTime64(6), `query_start_time` DateTime, `query_start_time_microseconds` DateTime64(6), `query_duration_ms` UInt64, `read_rows` UInt64, `read_bytes` UInt64, `written_rows` UInt64, `written_bytes` UInt64, `result_rows` UInt64, `result_bytes` UInt64, `memory_usage` UInt64, `peak_threads_usage` UInt64, `current_database` LowCardinality(String), `query` String, `formatted_query` String, `normalized_query_hash` UInt64, `query_kind` LowCardinality(String), `exception_code` Int32, `exception` String, `stack_trace` String, `ProfileEvents_RealTimeMicroseconds` UInt64, `ProfileEvents_OSCPUVirtualTimeMicroseconds` UInt64, `ProfileEvents_S3Clients` UInt64, `ProfileEvents_S3DeleteObjects` UInt64, `ProfileEvents_S3CopyObject` UInt64, `ProfileEvents_S3ListObjects` UInt64, `ProfileEvents_S3HeadObject` UInt64, `ProfileEvents_S3GetObjectAttributes` UInt64, `ProfileEvents_S3CreateMultipartUpload` UInt64, `ProfileEvents_S3UploadPartCopy` UInt64, `ProfileEvents_S3UploadPart` UInt64, `ProfileEvents_S3AbortMultipartUpload` UInt64, `ProfileEvents_S3CompleteMultipartUpload` UInt64, `ProfileEvents_S3PutObject` UInt64, `ProfileEvents_S3GetObject` UInt64, `ProfileEvents_ReadBufferFromS3Bytes` UInt64, `ProfileEvents_WriteBufferFromS3Bytes` UInt64, `lc_workflow` String, `lc_kind` String, `lc_id` String, `lc_route_id` String, `lc_access_method` String, `lc_api_key_label` String, `lc_api_key_mask` String, `lc_query_type` String, `lc_product` String, `lc_chargeable` UInt8, `lc_name` String, `lc_request_name` String, `lc_client_query_id` String, `lc_org_id` String, `team_id` Int64, `lc_user_id` Int64, `lc_session_id` String, `lc_dashboard_id` Int64, `lc_insight_id` Int64, `lc_cohort_id` Int64, `lc_batch_export_id` String, `lc_experiment_id` Int64, `lc_experiment_feature_flag_key` String, `lc_alert_config_id` String, `lc_feature` String, `lc_table_id` String, `lc_warehouse_query` UInt8, `lc_person_on_events_mode` String, `lc_service_name` String, `lc_workload` String, `lc_query__kind` String, `lc_query__query` String, `lc_temporal__workflow_namespace` String, `lc_temporal__workflow_type` String, `lc_temporal__workflow_id` String, `lc_temporal__workflow_run_id` String, `lc_temporal__activity_type` String, `lc_temporal__activity_id` String, `lc_temporal__attempt` Int64, `lc_dagster__job_name` String, `lc_dagster__run_id` String, `lc_dagster__owner` String) AS SELECT hostname, user, query_id, type, event_date, event_time, event_time_microseconds, query_start_time, query_start_time_microseconds, query_duration_ms, read_rows, read_bytes, written_rows, written_bytes, result_rows, result_bytes, memory_usage, peak_threads_usage, current_database, query, formatted_query, normalized_query_hash, query_kind, exception_code, exception, stack_trace, ProfileEvents['RealTimeMicroseconds'] AS ProfileEvents_RealTimeMicroseconds, ProfileEvents['OSCPUVirtualTimeMicroseconds'] AS ProfileEvents_OSCPUVirtualTimeMicroseconds, ProfileEvents['S3Clients'] AS ProfileEvents_S3Clients, ProfileEvents['S3DeleteObjects'] AS ProfileEvents_S3DeleteObjects, ProfileEvents['S3CopyObject'] AS ProfileEvents_S3CopyObject, ProfileEvents['S3ListObjects'] AS ProfileEvents_S3ListObjects, ProfileEvents['S3HeadObject'] AS ProfileEvents_S3HeadObject, ProfileEvents['S3GetObjectAttributes'] AS ProfileEvents_S3GetObjectAttributes, ProfileEvents['S3CreateMultipartUpload'] AS ProfileEvents_S3CreateMultipartUpload, ProfileEvents['S3UploadPartCopy'] AS ProfileEvents_S3UploadPartCopy, ProfileEvents['S3UploadPart'] AS ProfileEvents_S3UploadPart, ProfileEvents['S3AbortMultipartUpload'] AS ProfileEvents_S3AbortMultipartUpload, ProfileEvents['S3CompleteMultipartUpload'] AS ProfileEvents_S3CompleteMultipartUpload, ProfileEvents['S3PutObject'] AS ProfileEvents_S3PutObject, ProfileEvents['S3GetObject'] AS ProfileEvents_S3GetObject, ProfileEvents['ReadBufferFromS3Bytes'] AS ProfileEvents_ReadBufferFromS3Bytes, ProfileEvents['WriteBufferFromS3Bytes'] AS ProfileEvents_WriteBufferFromS3Bytes, JSONExtractString(log_comment, 'workflow') AS lc_workflow, JSONExtractString(log_comment, 'kind') AS lc_kind, JSONExtractString(log_comment, 'id') AS lc_id, JSONExtractString(log_comment, 'route_id') AS lc_route_id, JSONExtractString(log_comment, 'access_method') AS lc_access_method, JSONExtractString(log_comment, 'api_key_label') AS lc_api_key_label, JSONExtractString(log_comment, 'api_key_mask') AS lc_api_key_mask, JSONExtractString(log_comment, 'query_type') AS lc_query_type, JSONExtractString(log_comment, 'product') AS lc_product, JSONExtractInt(log_comment, 'chargeable') = 1 AS lc_chargeable, JSONExtractString(log_comment, 'name') AS lc_name, JSONExtractString(log_comment, 'request_name') AS lc_request_name, JSONExtractString(log_comment, 'client_query_id') AS lc_client_query_id, JSONExtractString(log_comment, 'org_id') AS lc_org_id, JSONExtractInt(log_comment, 'team_id') AS team_id, JSONExtractInt(log_comment, 'user_id') AS lc_user_id, JSONExtractString(log_comment, 'session_id') AS lc_session_id, JSONExtractInt(log_comment, 'dashboard_id') AS lc_dashboard_id, JSONExtractInt(log_comment, 'insight_id') AS lc_insight_id, JSONExtractInt(log_comment, 'cohort_id') AS lc_cohort_id, JSONExtractString(log_comment, 'batch_export_id') AS lc_batch_export_id, JSONExtractInt(log_comment, 'experiment_id') AS lc_experiment_id, JSONExtractString(log_comment, 'experiment_feature_flag_key') AS lc_experiment_feature_flag_key, JSONExtractString(log_comment, 'alert_config_id') AS lc_alert_config_id, JSONExtractString(log_comment, 'feature') AS lc_feature, JSONExtractString(log_comment, 'table_id') AS lc_table_id, JSONExtractInt(log_comment, 'warehouse_query') = 1 AS lc_warehouse_query, JSONExtractString(log_comment, 'person_on_events_mode') AS lc_person_on_events_mode, JSONExtractString(log_comment, 'service_name') AS lc_service_name, JSONExtractString(log_comment, 'workload') AS lc_workload, if(JSONHas(log_comment, 'query', 'source'), JSONExtractString(log_comment, 'query', 'source', 'kind'), JSONExtractString(log_comment, 'query', 'kind')) AS lc_query__kind, if(JSONHas(log_comment, 'query', 'source'), JSONExtractString(log_comment, 'query', 'source', 'query'), JSONExtractString(log_comment, 'query', 'query')) AS lc_query__query, JSONExtractString(log_comment, 'temporal', 'workflow_namespace') AS lc_temporal__workflow_namespace, JSONExtractString(log_comment, 'temporal', 'workflow_type') AS lc_temporal__workflow_type, JSONExtractString(log_comment, 'temporal', 'workflow_id') AS lc_temporal__workflow_id, JSONExtractString(log_comment, 'temporal', 'workflow_run_id') AS lc_temporal__workflow_run_id, JSONExtractString(log_comment, 'temporal', 'activity_type') AS lc_temporal__activity_type, JSONExtractString(log_comment, 'temporal', 'activity_id') AS lc_temporal__activity_id, JSONExtractInt(log_comment, 'temporal', 'attempt') AS lc_temporal__attempt, JSONExtractString(log_comment, 'dagster', 'job_name') AS lc_dagster__job_name, JSONExtractString(log_comment, 'dagster', 'run_id') AS lc_dagster__run_id, JSONExtractString(log_comment, 'dagster', 'tags', 'owner') AS lc_dagster__owner FROM system.query_log WHERE (type != 'QueryStart') AND is_initial_query