// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/schema_state.proto

package chschema_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeSchemaState struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Clusters          []*Cluster             `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Tables            []*Table               `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	Views             []*View                `protobuf:"bytes,3,rep,name=views,proto3" json:"views,omitempty"`
	MaterializedViews []*MaterializedView    `protobuf:"bytes,4,rep,name=materialized_views,json=materializedViews,proto3" json:"materialized_views,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NodeSchemaState) Reset() {
	*x = NodeSchemaState{}
	mi := &file_proto_schema_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeSchemaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSchemaState) ProtoMessage() {}

func (x *NodeSchemaState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSchemaState.ProtoReflect.Descriptor instead.
func (*NodeSchemaState) Descriptor() ([]byte, []int) {
	return file_proto_schema_state_proto_rawDescGZIP(), []int{0}
}

func (x *NodeSchemaState) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *NodeSchemaState) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *NodeSchemaState) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *NodeSchemaState) GetMaterializedViews() []*MaterializedView {
	if x != nil {
		return x.MaterializedViews
	}
	return nil
}

// SchemaState represents the complete desired or current state of a ClickHouse schema.
// This message serves as the top-level container for all schema objects and can be
// serialized/deserialized for storage, transmission, or comparison.
type SchemaState struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Metadata          *SchemaMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Clusters          []*Cluster             `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Tables            []*Table               `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
	Views             []*View                `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
	MaterializedViews []*MaterializedView    `protobuf:"bytes,5,rep,name=materialized_views,json=materializedViews,proto3" json:"materialized_views,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SchemaState) Reset() {
	*x = SchemaState{}
	mi := &file_proto_schema_state_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaState) ProtoMessage() {}

func (x *SchemaState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_state_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaState.ProtoReflect.Descriptor instead.
func (*SchemaState) Descriptor() ([]byte, []int) {
	return file_proto_schema_state_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaState) GetMetadata() *SchemaMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SchemaState) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *SchemaState) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SchemaState) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *SchemaState) GetMaterializedViews() []*MaterializedView {
	if x != nil {
		return x.MaterializedViews
	}
	return nil
}

// SchemaMetadata contains metadata about the schema state
type SchemaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the schema format (for future compatibility)
	SchemaVersion string `protobuf:"bytes,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	// Timestamp when this state was captured or defined (RFC3339 format)
	Timestamp *string `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// Source of this schema state (e.g., "yaml_files", "introspection", "api")
	Source *string `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// Target database or node this schema applies to
	TargetDatabase *string `protobuf:"bytes,4,opt,name=target_database,json=targetDatabase,proto3,oneof" json:"target_database,omitempty"`
	// Target cluster this schema applies to
	TargetCluster *string `protobuf:"bytes,5,opt,name=target_cluster,json=targetCluster,proto3,oneof" json:"target_cluster,omitempty"`
	// Optional description or notes about this schema state
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Git commit hash or version identifier (if tracked in version control)
	Version       *string `protobuf:"bytes,7,opt,name=version,proto3,oneof" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaMetadata) Reset() {
	*x = SchemaMetadata{}
	mi := &file_proto_schema_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMetadata) ProtoMessage() {}

func (x *SchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMetadata.ProtoReflect.Descriptor instead.
func (*SchemaMetadata) Descriptor() ([]byte, []int) {
	return file_proto_schema_state_proto_rawDescGZIP(), []int{2}
}

func (x *SchemaMetadata) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *SchemaMetadata) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *SchemaMetadata) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *SchemaMetadata) GetTargetDatabase() string {
	if x != nil && x.TargetDatabase != nil {
		return *x.TargetDatabase
	}
	return ""
}

func (x *SchemaMetadata) GetTargetCluster() string {
	if x != nil && x.TargetCluster != nil {
		return *x.TargetCluster
	}
	return ""
}

func (x *SchemaMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SchemaMetadata) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

var File_proto_schema_state_proto protoreflect.FileDescriptor

const file_proto_schema_state_proto_rawDesc = "" +
	"\n" +
	"\x18proto/schema_state.proto\x12\x11clickhouse.iac.v1\x1a\x13proto/cluster.proto\x1a\x11proto/table.proto\x1a\x10proto/view.proto\"\xfe\x01\n" +
	"\x0fNodeSchemaState\x126\n" +
	"\bclusters\x18\x01 \x03(\v2\x1a.clickhouse.iac.v1.ClusterR\bclusters\x120\n" +
	"\x06tables\x18\x02 \x03(\v2\x18.clickhouse.iac.v1.TableR\x06tables\x12-\n" +
	"\x05views\x18\x03 \x03(\v2\x17.clickhouse.iac.v1.ViewR\x05views\x12R\n" +
	"\x12materialized_views\x18\x04 \x03(\v2#.clickhouse.iac.v1.MaterializedViewR\x11materializedViews\"\xb9\x02\n" +
	"\vSchemaState\x12=\n" +
	"\bmetadata\x18\x01 \x01(\v2!.clickhouse.iac.v1.SchemaMetadataR\bmetadata\x126\n" +
	"\bclusters\x18\x02 \x03(\v2\x1a.clickhouse.iac.v1.ClusterR\bclusters\x120\n" +
	"\x06tables\x18\x03 \x03(\v2\x18.clickhouse.iac.v1.TableR\x06tables\x12-\n" +
	"\x05views\x18\x04 \x03(\v2\x17.clickhouse.iac.v1.ViewR\x05views\x12R\n" +
	"\x12materialized_views\x18\x05 \x03(\v2#.clickhouse.iac.v1.MaterializedViewR\x11materializedViews\"\xf3\x02\n" +
	"\x0eSchemaMetadata\x12%\n" +
	"\x0eschema_version\x18\x01 \x01(\tR\rschemaVersion\x12!\n" +
	"\ttimestamp\x18\x02 \x01(\tH\x00R\ttimestamp\x88\x01\x01\x12\x1b\n" +
	"\x06source\x18\x03 \x01(\tH\x01R\x06source\x88\x01\x01\x12,\n" +
	"\x0ftarget_database\x18\x04 \x01(\tH\x02R\x0etargetDatabase\x88\x01\x01\x12*\n" +
	"\x0etarget_cluster\x18\x05 \x01(\tH\x03R\rtargetCluster\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x06 \x01(\tH\x04R\vdescription\x88\x01\x01\x12\x1d\n" +
	"\aversion\x18\a \x01(\tH\x05R\aversion\x88\x01\x01B\f\n" +
	"\n" +
	"_timestampB\t\n" +
	"\a_sourceB\x12\n" +
	"\x10_target_databaseB\x11\n" +
	"\x0f_target_clusterB\x0e\n" +
	"\f_descriptionB\n" +
	"\n" +
	"\b_versionB9Z7github.com/posthog/chschema/gen/chschema_v1;chschema_v1b\x06proto3"

var (
	file_proto_schema_state_proto_rawDescOnce sync.Once
	file_proto_schema_state_proto_rawDescData []byte
)

func file_proto_schema_state_proto_rawDescGZIP() []byte {
	file_proto_schema_state_proto_rawDescOnce.Do(func() {
		file_proto_schema_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_schema_state_proto_rawDesc), len(file_proto_schema_state_proto_rawDesc)))
	})
	return file_proto_schema_state_proto_rawDescData
}

var file_proto_schema_state_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_schema_state_proto_goTypes = []any{
	(*NodeSchemaState)(nil),  // 0: clickhouse.iac.v1.NodeSchemaState
	(*SchemaState)(nil),      // 1: clickhouse.iac.v1.SchemaState
	(*SchemaMetadata)(nil),   // 2: clickhouse.iac.v1.SchemaMetadata
	(*Cluster)(nil),          // 3: clickhouse.iac.v1.Cluster
	(*Table)(nil),            // 4: clickhouse.iac.v1.Table
	(*View)(nil),             // 5: clickhouse.iac.v1.View
	(*MaterializedView)(nil), // 6: clickhouse.iac.v1.MaterializedView
}
var file_proto_schema_state_proto_depIdxs = []int32{
	3, // 0: clickhouse.iac.v1.NodeSchemaState.clusters:type_name -> clickhouse.iac.v1.Cluster
	4, // 1: clickhouse.iac.v1.NodeSchemaState.tables:type_name -> clickhouse.iac.v1.Table
	5, // 2: clickhouse.iac.v1.NodeSchemaState.views:type_name -> clickhouse.iac.v1.View
	6, // 3: clickhouse.iac.v1.NodeSchemaState.materialized_views:type_name -> clickhouse.iac.v1.MaterializedView
	2, // 4: clickhouse.iac.v1.SchemaState.metadata:type_name -> clickhouse.iac.v1.SchemaMetadata
	3, // 5: clickhouse.iac.v1.SchemaState.clusters:type_name -> clickhouse.iac.v1.Cluster
	4, // 6: clickhouse.iac.v1.SchemaState.tables:type_name -> clickhouse.iac.v1.Table
	5, // 7: clickhouse.iac.v1.SchemaState.views:type_name -> clickhouse.iac.v1.View
	6, // 8: clickhouse.iac.v1.SchemaState.materialized_views:type_name -> clickhouse.iac.v1.MaterializedView
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_schema_state_proto_init() }
func file_proto_schema_state_proto_init() {
	if File_proto_schema_state_proto != nil {
		return
	}
	file_proto_cluster_proto_init()
	file_proto_table_proto_init()
	file_proto_view_proto_init()
	file_proto_schema_state_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_schema_state_proto_rawDesc), len(file_proto_schema_state_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_schema_state_proto_goTypes,
		DependencyIndexes: file_proto_schema_state_proto_depIdxs,
		MessageInfos:      file_proto_schema_state_proto_msgTypes,
	}.Build()
	File_proto_schema_state_proto = out.File
	file_proto_schema_state_proto_goTypes = nil
	file_proto_schema_state_proto_depIdxs = nil
}
